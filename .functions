function mc() {
  cd "$(walk "$@")"
}

# HOMEBREW
function brew() {
  command brew "$@"

  if [[ "$1" == "install" || "$1" == "uninstall" ]]; then
    echo ""
    echo -e "\e[34mUpdating Brewfile...\e[0m"
    brew bundle dump --file="${HOME}/.config/brew/Brewfile" --force
    echo -e "\e[32mBrewfile updated successfully!\e[0m"
  fi
}

# DOCKER
function drm() {
  docker stop "$1"
  docker rm "$1"
}

# GIT
function deep_check_branches() {
  find . -type d -name ".git" -execdir sh -c '
      cd "{}" &&
      repo=$(basename "$(dirname "$(pwd)")") &&
      branch=$(git symbolic-ref --short HEAD 2>/dev/null) &&
      [ "$branch" != "develop" ] &&
      echo "Repo: $repo is actually on branch $branch"
  ' \;
}

function git_status_all() {
  find ~/Developer -name '.git' | while read repo; do
    repo=${repo//\.git/}
    git -C "$repo" status -s | grep -q -v "^\$" && echo -e "\n\033[1m${repo}\033[m" && git -C "$repo" status -s || true
  done
}

function git_fetch_all() {
  find ~/Developer -name '.git' | while read repo; do
    repo=${repo//\.git/}
    echo -e "\n\033[1m${repo}\033[m" && git -C "$repo" fetch --all || true
  done
}

function git_pull_dev() {
  local actual_branch=$(git symbolic-ref --short HEAD)
  local branches=("develop" "udev")
  local remote="origin"

  # Define color codes
  local green="\033[0;32m"
  local yellow="\033[0;33m"
  local red="\033[0;31m"
  local no_color="\033[0m"

  echo -e "\n${yellow}Starting the process to update branches...${no_color}"

  for branch in "${branches[@]}"; do
    echo -e "${yellow}Checking existence of branch: $branch...${no_color}"
    # Use git ls-remote to check if the branch exists on the remote
    if git ls-remote --heads $remote | grep -qw $branch; then
      echo -e "${green}Branch $branch exists on $remote. Proceeding with fetch, checkout, and pull...${no_color}\n"
      git fetch $remote $branch
      git checkout $branch
      git pull $remote $branch
      echo -e "\n${green}Successfully updated $branch.${no_color}"
    else
      echo -e "${red}Branch $branch does not exist on $remote, skipping...${no_color}\n"
    fi
  done

  git checkout $actual_branch
  echo -e "\n${green}Switched back to the original branch: $actual_branch.${no_color}"
}

# GREP
function findtext() {
  rg -H --no-heading --color=always -i --files-with-matches --hidden "$1"
}

# TMUX
function tcd() {
  if [ -d ${PWD}/$1 ]; then
    tmux new-window -c ${PWD}/$1
  else
    tmux new-window -c $1
  fi
}

# VERCEL
function vercelpullenvs() {
  vercel env pull --environment development .env.development.local
  vercel env pull --environment production .env.production.local
}

# POSTGRES
function pgdump() {
  if [ "$#" -ne 2 ]; then
    echo "Usage: pgdumpb <connection_string> <file_name>"
    echo "Config: Configure function in .functions file"
    return 1
  fi
  pg_dump "$1" --no-owner --no-privileges -F c -b -v -f "$2.dump"
}

function pgrestore() {
  if [ "$#" -ne 2 ]; then
    echo "Usage: pgrestore <connection_string> <dump_file>"
    echo "Config: Configure function in .functions file"
    return 1
  fi
  pg_restore -d "$1" --no-owner --role={{role}} "$2.dump"
}
