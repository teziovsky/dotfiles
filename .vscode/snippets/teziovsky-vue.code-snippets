{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Vue3 Composition API: Base TypeScript": {
    "scope": "vue",
    "prefix": "vbase",
    "body": [
      "<script lang=\"ts\" setup>",
      "$0",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    $TM_FILENAME_BASE",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "Base for Vue Setup Composition API - TypeScript"
  },
  "Vue3 Composition API: Define props JavaScript": {
    "scope": "javascript",
    "prefix": "vprops",
    "body": ["const props = defineProps(['$0']);"]
  },
  "Vue3 Composition API: Define props TypeScript": {
    "scope": "typescript",
    "prefix": "vprops",
    "body": ["const props = defineProps<{", "  $0", "}>();"]
  },
  "Vue3 CompositionAPI: Emits TypeScript": {
    "scope": "typescript",
    "prefix": "vemits",
    "body": ["const emits = defineEmits<{", "  (event: \"$0\"): void,", "}>();"],
    "description": "Vue3 Emits with TypeScript"
  },
  "Vue3 Composition API: Props with Defaults": {
    "scope": "typescript",
    "prefix": "vdefprops",
    "body": [
      "const props = withDefaults(",
      "  defineProps<{",
      "    ${1:id: number}",
      "  }>(),",
      "  {",
      "    ${0:id: 0}",
      "  },",
      ");"
    ],
    "description": "Vue3 Props with Defaults"
  },
  "Vue3 Composition API: computed": {
    "scope": "javascript, typescript",
    "prefix": "vcomputed",
    "body": ["const ${1:computedVal} = computed(() => {", " return ${0:console.log('Computed Log');}", "});"],
    "description": "Vue Composition api - computed"
  },
  "Vue3 Options API: Pinia Options Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-options",
    "body": [
      "import { defineStore, acceptHMRUpdate } from 'pinia'",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {",
      " state: () => ({",
      "   $0",
      " }),",
      " getters: {},",
      " actions: {},",
      "})",
      "",
      "if (import.meta.hot) {",
      " import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      "}",
      ""
    ],
    "description": "Bootstrap the code needed for a Vue.js Pinia Options Store file"
  },
  "Vue3 Composition API: Pinia Setup Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-setup",
    "body": [
      "import { defineStore, acceptHMRUpdate } from 'pinia'",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
      " $0",
      " return {}",
      "})",
      "",
      "if (import.meta.hot) {",
      " import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      "}",
      ""
    ],
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file"
  }
}
