{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "console.log": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "cl",
    "body": "console.log(${0:'here'});"
  },
  "console.log('var', var)": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "vl",
    "body": "console.log('$0:', $0);"
  },
  "console.log({var})": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "ol",
    "body": "console.log({$0});"
  },
  "console.assert()": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "assert",
    "body": ["console.assert(${0:'here'});"],
    "description": "console.assert()"
  },
  "console.error('var', var)": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "error",
    "body": "console.error('$0:', $0);"
  },
  "console.info('var', var)": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "info",
    "body": "console.info('$0:', $0);"
  },
  "throw log": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "tl",
    "body": "throw new Error(JSON.stringify({$0}, null, 2))"
  },
  "Ternary operator": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "ternary",
    "body": ["${1:cond} ? ${2:true} : ${0:false};"],
    "description": "Ternary operator"
  },
  "if statement": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "if",
    "body": ["if ($1) {", "  $0", "}"]
  },
  "try/catch": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "try",
    "body": ["try {", "  $0", "} catch (error) {", "  ", "}  finally {", "  ", "}"]
  },
  "Switch Statement": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "switch",
    "body": [
      "switch (${0:key}) {",
      "  case 'value': {",
      "    ",
      "    break",
      "  }",
      "  default: {",
      "    break",
      "  }",
      "}"
    ]
  },
  "Switch case": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "case",
    "body": ["case ${2:'value'}: {", "  return $0", "}"]
  },
  "ES6 Filter function – JavaScript": {
    "scope": "javascript, javascriptreact",
    "prefix": "filter",
    "body": ["$1.filter((${2:item}) => console.log('$2: ', $2)$0);"],
    "description": "ES6 Filter function"
  },
  "ES6 Filter function – TypeScript": {
    "scope": "typescript, typescriptreact",
    "prefix": "filter",
    "body": ["$1.filter((${2:item}: ${3:any}) => console.log('$2: ', $2)$0);"],
    "description": "ES6 Filter function"
  },
  "ES6 Map function – JavaScript": {
    "scope": "javascript, javascriptreact",
    "prefix": "map",
    "body": ["$1.map((${2:item}) => $2$0);"],
    "description": "ES6 Map function"
  },
  "ES6 Map function – TypeScript": {
    "scope": "typescript, typescriptreact",
    "prefix": "map",
    "body": ["$1.map((${2:item}: ${3:any}) => $2$0);"],
    "description": "ES6 Map function"
  },
  "Import statement - import x from ''": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "imp",
    "body": "import ${0:*} from '$1';"
  },
  "Import statement - const a = require('a')": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "imp",
    "body": "import ${0:*} from '$1';",
    "description": "Import statement - const a = require('a')"
  },
  "async function": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "afun",
    "body": ["async function $1($0) {", "  ", "}"]
  },
  "Export interface": {
    "scope": "typescript, typescriptreact",
    "prefix": "exportinterface",
    "body": ["export interface $1 {", "  $0", "}"],
    "description": "Export interface"
  },
  "Sleep function TypeScript": {
    "scope": "typescript, typescriptreact",
    "prefix": "sleep",
    "body": ["const sleep = (time = 3000) => new Promise<void> (resolve => setTimeout (resolve, time));"],
    "description": "Simple sleep function for testing"
  },
  "Sleep function JavaScript": {
    "scope": "javascript, javascriptreact",
    "prefix": "sleep",
    "body": ["const sleep = (time = 3000) => new Promise (resolve => setTimeout (resolve, time));"],
    "description": "Simple sleep function for testing"
  },

  // Jest snippets
  "Jest: test": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "test",
    "body": ["test('$1', () => {", "  $0", "})"]
  },
  "Jest: async test": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "atest",
    "body": ["test('$1', async () => {", "  $0", "})"]
  },
  "Jest: it block": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "it",
    "body": ["it('$1', () => {", "  $2", "})"]
  },
  "Jest: describe block": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $2", "})"]
  },

  // React snippets
  "React: Reducer": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "reducer",
    "body": [
      "function ${1:someReducer}(state, action) {",
      "  switch (action.type) {",
      "    case ${0:'value'}: {",
      "      return",
      "    }",
      "    default: {",
      "      throw new Error(`Unhandled action type: ${action.type}`)",
      "    }",
      "  }",
      "}"
    ]
  },
  "React: import React": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "imr",
    "body": ["import React from 'react'\n"]
  },
  "React: useState": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rus",
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2);"]
  },
  "React: useEffect": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rue",
    "body": ["React.useEffect(() => {", "  $0", "}, [])"]
  },
  "React: useReducer": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rur",
    "body": ["const [state, dispatch] = React.useReducer(${0:someReducer}, {", "  ", "})"]
  },
  "React: useRef": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "ruref",
    "body": ["const ${1:someRef} = React.useRef($0)"]
  },
  "React: Component": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rc",
    "body": ["class $1 extends React.Component {", "  render() {", "    $0", "  }", "}"]
  },
  "React: componentWillMount": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcwm",
    "body": ["componentWillMount() {", "  $0", "}"]
  },
  "React: componentDidMount": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcdm",
    "body": ["componentDidMount() {", "  $0", "}"]
  },
  "React: componentWillReceiveProps": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcwrp",
    "body": ["componentWillReceiveProps(nextProps) {", "  $0", "}"]
  },
  "React: componentWillUpdate": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcwu",
    "body": ["componentWillUpdate(nextProps, nextState) {", "  $0", "}"]
  },
  "React: componentDidUpdate": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "  $0", "}"]
  },
  "React: componentWillUnmount": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "rcwu",
    "body": ["componentWillUnmount() {", "  $0", "}"]
  },

  // Vue snippets
  "Vue3 Composition API: Base Typescript": {
    "scope": "vue",
    "prefix": "vbase",
    "body": [
      "<script lang=\"ts\" setup>",
      "$0",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    $TM_FILENAME_BASE",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "Base for Vue Setup Composition API - Typescript"
  },
  "Vue3 Composition API: Define props JavaScript": {
    "scope": "javascript",
    "prefix": "vprops",
    "body": ["const props = defineProps(['$0']);"]
  },
  "Vue3 Composition API: Define props TypeScript": {
    "scope": "typescript",
    "prefix": "vprops",
    "body": ["const props = defineProps<{", "  $0", "}>();"]
  },
  "Vue3 Emits with TypeScript": {
    "scope": "typescript",
    "prefix": "vemits",
    "body": ["const emits = defineEmits<{", "  (event: \"$0\"): void,", "}>();"],
    "description": "Vue3 Emits with TypeScript"
  },
  "Vue3 Props with Defaults": {
    "scope": "typescript",
    "prefix": "vdefprops",
    "body": [
      "const props = withDefaults(",
      "  defineProps<{",
      "    ${1:id: number}",
      "  }>(),",
      "  {",
      "    ${0:id: 0}",
      "  },",
      ");"
    ],
    "description": "Vue3 Props with Defaults"
  },
  "Vue3 Composition API: computed": {
    "scope": "javascript, typescript",
    "prefix": "vcomputed",
    "body": ["const ${1:computedVal} = computed(() => {", " return ${0:console.log('Computed Log');}", "});"],
    "description": "Vue Composition api - computed"
  },

  // CSS Snippets
  "CSS: Important": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "!",
    "body": ["!important"]
  },
  "CSS: Flex Center": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "flexcenter",
    "body": ["display: flex;", "justify-content: center;", "align-items: center;"],
    "description": "CSS: Flex Center"
  },
  "CSS: Grid Center": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "gridcenter",
    "body": ["display: grid;", "place-items: center;"],
    "description": "CSS: Grid Center"
  },
  "CSS: Absolute Center": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "absolutecenter",
    "body": ["position: absolute;", "top: 50%;", "left: 50%;", "transform: translate(-50%, -50%);"],
    "description": "CSS: Absolute Center"
  },
  "CSS: Width 100%": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "wfull",
    "body": ["width: 100%;"],
    "description": "CSS: Width 100%"
  },
  "CSS: Height 100%": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "hfull",
    "body": ["height: 100%;"],
    "description": "CSS: Height 100%"
  },
  "CSS: Hover and Focus": {
    "scope": "css, scss, less, sass, stylus, postcss",
    "prefix": "hf",
    "body": ["&:hover,", "&:focus {", "  ${0:text-decoration: underline;}", "}"],
    "description": "CSS: Hover and Focus"
  }
}
